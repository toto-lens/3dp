<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Model Viewer</title>
    <script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>
</head>
<body>
    <input type="text" id="promptInput" placeholder="Enter your prompt">
    <button id="generateBtn">Generate 3D Model</button>
    <div id="result"></div>
    <model-viewer id="modelViewer" style="display: none;" alt="A 3D model" auto-rotate camera-controls></model-viewer>
    <a id="downloadLink" style="display: none;">Download 3D Model</a>

    <script>
        const POLLING_INTERVAL = 5000; // 5 seconds

        async function checkModelStatus(modelId) {
            try {
                const response = await fetch(`http://localhost:3000/get-model/${modelId}`);
                const modelData = await response.json();

                if (modelData.status === "SUCCEEDED") {
                    const modelUrl = modelData.model_urls.glb; // Use the GLB URL for the model
                    const modelViewer = document.getElementById('modelViewer');
                    modelViewer.src = modelUrl; // Set the model URL
                    modelViewer.style.display = 'block'; // Show the model viewer

                    // Show download link
                    const downloadLink = document.getElementById('downloadLink');
                    downloadLink.href = modelUrl; // Set the download link to the model URL
                    downloadLink.style.display = 'block'; // Show the download link
                    downloadLink.download = '3d_model.glb'; // Set download attribute to suggest a filename
                    downloadLink.innerText = 'Download 3D Model';

                    document.getElementById('result').innerText = `Model is ready.`;
                } else {
                    document.getElementById('result').innerText = 'Model is not ready yet. Polling...';
                    setTimeout(() => checkModelStatus(modelId), POLLING_INTERVAL); // Poll again after 5 seconds
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('result').innerText = 'Error fetching model details';
            }
        }

        document.getElementById('generateBtn').addEventListener('click', async () => {
            const prompt = document.getElementById('promptInput').value;

            try {
                // Step 1: Generate the model
                const generationResponse = await fetch('http://localhost:3000/generate-3d-model', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ prompt }),
                });

                const generationData = await generationResponse.json();
                if (generationData.result) {
                    const modelId = generationData.result;
                    document.getElementById('result').innerText = `3D Model ID: ${modelId}`;

                    // Step 2: Poll the model status
                    checkModelStatus(modelId);
                } else {
                    document.getElementById('result').innerText = 'Error generating model';
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('result').innerText = 'Failed to connect to the server';
            }
        });
    </script>
</body>
</html>
